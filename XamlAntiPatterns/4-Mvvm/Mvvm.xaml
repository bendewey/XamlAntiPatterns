<Page x:Class="XamlAntiPatterns._4_Mvvm.Mvvm"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      mc:Ignorable="d" 
      d:DesignHeight="500" d:DesignWidth="800"
	Title="Model-View-ViewModel" Tag="{DynamicResource Sin4ThemeBrush}">
    <Page.Resources>
        <SolidColorBrush x:Key="Sin4ThemeBrush" Color="#FF418B00"/>
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="Margin" Value="4"/>
        </Style>
        <Style x:Key="HeaderTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="{DynamicResource Sin4ThemeBrush}"/>
            <Setter Property="FontFamily" Value="Segoe UI Light"/>
            <Setter Property="FontSize" Value="29.333"/>
            <Setter Property="Margin" Value="4"/>
        </Style>
        <Style TargetType="{x:Type StackPanel}">
            <Setter Property="Margin" Value="20"/>
        </Style>
    </Page.Resources>


    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <StackPanel>
            <TextBlock Text="Setting Properties" Style="{DynamicResource HeaderTextBlockStyle}" />
            <TextBlock Text="On small projects setting properties may be easy, but as complexity grows, this technique is tedious and decreases maintainability." TextWrapping="Wrap" />
        </StackPanel>
        <StackPanel Grid.Row="2">
            <StackPanel.Resources>
                <Style TargetType="TextBlock">
                    <Setter Property="FontFamily" Value="Segoe UI"/>
                    <Setter Property="FontSize" Value="20"/>
                    <Setter Property="Foreground" Value="#FF444444"/>
                    <Setter Property="Margin" Value="4"/>
                </Style>
            </StackPanel.Resources>
            <TextBlock Text="Username" />
            <TextBox x:Name="txtUsername" FontSize="18" />
            <TextBlock Text="Password" />
            <PasswordBox x:Name="txtPassword" FontSize="18" />
            <Button Content="Login" Click="Login_Click" Margin="16" FontSize="18" />
        </StackPanel>

        <StackPanel Grid.Column="1">
            <TextBlock Text="MVVM" Style="{DynamicResource HeaderTextBlockStyle}" />
            <TextBlock Text="The answer is the Model-View-ViewModel Pattern.  This pattern uses less code, supports testability, and allows converters and validation." TextWrapping="Wrap" />
        </StackPanel>
        <ScrollViewer x:Name="MvvmPanel" Grid.Row="1" Grid.Column="1">
            <StackPanel DataContext="{Binding Order}">
                <TextBlock Text="Firstname" />
                <TextBox Text="{Binding Firstname, Mode=TwoWay}" />
                <TextBlock Text="Lastname" />
                <TextBox Text="{Binding Lastname, Mode=TwoWay}" />
                <TextBlock Text="Email" />
                <TextBox Text="{Binding Email, Mode=TwoWay}" />
                <TextBlock Text="Phone" />
                <TextBox Text="{Binding Phone, Mode=TwoWay}" />
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <GroupBox Margin="4"  Header="Billing Address">
                        <StackPanel Margin="4">
                            <TextBlock Text="Address1" />
                            <TextBox Text="{Binding Billing.Address1, Mode=TwoWay}" />
                            <TextBlock Text="Address2" />
                            <TextBox Text="{Binding Billing.Address2, Mode=TwoWay}" />
                            <TextBlock Text="City" />
                            <TextBox Text="{Binding Billing.City, Mode=TwoWay}" />
                            <TextBlock Text="State" />
                            <TextBox Text="{Binding Billing.State, Mode=TwoWay}" />
                            <TextBlock Text="Zip" />
                            <TextBox Text="{Binding Billing.Zip, Mode=TwoWay}" />
                        </StackPanel>
                    </GroupBox>

                    <GroupBox Grid.Column="1" Margin="4" Header="Shipping Address">
                        <StackPanel Margin="4">
                            <TextBlock Text="Address1" />
                            <TextBox Text="{Binding Shipping.Address1, Mode=TwoWay}" />
                            <TextBlock Text="Address2" />
                            <TextBox Text="{Binding Shipping.Address2, Mode=TwoWay}" />
                            <TextBlock Text="City" />
                            <TextBox Text="{Binding Shipping.City, Mode=TwoWay}" />
                            <TextBlock Text="State" />
                            <TextBox Text="{Binding Shipping.State, Mode=TwoWay}" />
                            <TextBlock Text="Zip" />
                            <TextBox Text="{Binding Shipping.Zip, Mode=TwoWay}" />
                        </StackPanel>
                    </GroupBox>
                </Grid>

                <Button Content="Place Order" FontSize="18" />
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
